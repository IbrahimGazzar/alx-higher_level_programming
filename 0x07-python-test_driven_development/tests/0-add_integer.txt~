Test cases for 0-add_integer.py
===============================

This text file explains the code provided in 0-add_integer.py and provides test cases for it

first of all, we have to import our code before we can test it:
      	 >>> import sys
	 >>> sys.path.append('..')
	 >>> add_integer = __import__('0-add_integer').add_integer
	 
Here we needed to first insert the path of our python script to be able to import our code and test it.

Our function add_integer(a, b=98) simply takes two numerical values and returns their summation, like this:

	>>> add_integer(34, 35)
	69
	>>> add_integer(89, 0)
	89
	>>> add_integer(-1, 9)
	8
	>>> add_integer(-8, -2)
	-10

However, in case only one input is given, the integer value '98' will be used instead of the second input:

	>>> add_integer(0)
	98

The function accepts both integer and float values, however in case of float, the value is first casted as integer before addition, and the result is always an int:

    	>>> add_integer(9.3, 4.7)
	13
	>>> add_integer(9.0, -1.9)
	8

In case an input of a type other than integer or float is given, an exception would be raised, calling out which input carries the inapropriate value:

   	>>> add_integer('hi')
	Traceback (most recent call last):
        ...
	TypeError: a must be an integer
      	>>> add_integer(98, 'not 98')
	Traceback (most recent call last):
 	...
 	TypeError: b must be an integer
	>>> add_integer(True, False)
	Traceback (most recent call last):
        ...
      	TypeError: a must be an integer
